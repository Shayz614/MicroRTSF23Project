diff --git a/MINS_Bot.java b/ShayAI.java
index 15b7f24..31960bd 100644
--- a/MINS_Bot.java
+++ b/ShayAI.java
@@ -1,389 +1,595 @@
+<<<<<<< HEAD
 package mins_bot;
-      
+
+import ai.abstraction.AbstractAction;
+import ai.abstraction.AbstractionLayerAI;
+import ai.abstraction.Harvest;
+import ai.abstraction.pathfinding.AStarPathFinding;
 import ai.core.AI;
-import ai.core.AIWithComputationBudget;
+import ai.abstraction.pathfinding.PathFinding;
 import ai.core.ParameterSpecification;
 import java.util.ArrayList;
-import java.util.List;
 import java.util.LinkedList;
+import java.util.List;
+import java.util.Random;
 import rts.GameState;
+import rts.PhysicalGameState;
+import rts.Player;
 import rts.PlayerAction;
-import rts.UnitAction;
-import rts.units.Unit;
-import rts.units.UnitType;
-import rts.units.UnitTypeTable;
-import java.lang.Math;
-import ai.abstraction.pathfinding.AStarPathFinding;
+import rts.units.*;
 
-public class MINS_Bot extends AIWithComputationBudget 
-{
+public class ShayAI extends AbstractionLayerAI {
 
-    UnitTypeTable m_utt = null;
-    private long startTime; //Variable to track when the decision-making process starts
-    private long maxTime;  //Variable to store the maximum allowed time for computation
-    PlayerAction playerAction;
-    GameState gameState;
-    int playerID;
-    AStarPathFinding pathFinder;
-    // This is the default constructor that microRTS will call:
+    private Random randomGenerator = new Random();
+    private UnitTypeTable unitTypeTable;
+    UnitType workerUnit;
+    UnitType baseUnit;
+    UnitType barracksUnit;
+    UnitType lightInfantry;
+    UnitType heavyInfantry;
 
-    public MINS_Bot(UnitTypeTable utt) 
-    {
 
-        super(-1,-1);
-        pathFinder = new AStarPathFinding();
-        m_utt = utt;
-        maxTime = TIME_BUDGET; //Sets the maxTime to TIME_BUDGET
+    public ShayAI(UnitTypeTable utt) {
+        this(utt, new AStarPathFinding());
+    }
 
+    public ShayAI(UnitTypeTable utt, PathFinding pathFinder) {
+        super(pathFinder);
+        initializeTypes(utt);
     }
-    public AI clone() 
-    {
-        return new MINS_Bot(m_utt);
+
+    private void initializeTypes(UnitTypeTable utt) {
+        this.unitTypeTable = utt;
+        workerUnit = unitTypeTable.getUnitType("Worker");
+        baseUnit = unitTypeTable.getUnitType("Base");
+        barracksUnit = unitTypeTable.getUnitType("Barracks");
+        lightInfantry = unitTypeTable.getUnitType("Light");
+        heavyInfantry = unitTypeTable.getUnitType("Heavy");
     }
 
-    // This will be called once at the beginning of each new game:    
-    public void reset() 
-    {
+    @Override
+    public void reset() {
+        super.reset();
+    }
 
+    public void reset(UnitTypeTable utt) {
+        initializeTypes(utt);
     }
 
-       
+    @Override
+    public AI clone() {
+        return new ShayAI(unitTypeTable, pf);
+    }
+    
+public PlayerAction getAction(int player, GameState gameState) {
+    PhysicalGameState physicalState = gameState.getPhysicalGameState();
+    Player currentPlayer = gameState.getPlayer(player);
 
-    // Called by microRTS at each game cycle.
+    // Managing base actions
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType() == baseUnit && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleBaseActions(unit, currentPlayer, physicalState);
+        }
+    }
 
-    // Returns the action the bot wants to execute.
+    // Managing barracks actions
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType() == barracksUnit && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleBarracksActions(unit, currentPlayer, physicalState);
+        }
+    }
 
-    public PlayerAction getAction(int player, GameState gs) 
-    {
-        gameState = gs.clone();
-        playerID = player;
-        playerAction = new PlayerAction();
-        playerAction.clear();
-        
-        List<Unit> units = gameState.getUnits();
-        for(Unit u : units){//goes through each unit and calls the relavent function to set its action if needed
-            if(!u.isIdle(gameState) || u.getPlayer() != player)
-            {//if the unit is occupied or controlled by the other player go to the next unit
-                continue;
-            }
-            //calls the function for the current unit
-            if("Worker".equals(u.getType().name))
-            {
-                //setWorkerAction(u);
-            }
-            
-            if("Light".equals(u.getType().name))
-            {
-                setLightAction(u);
-            }
-            
-            if("Heavy".equals(u.getType().name))
-            {
-                setHeavyAction(u);
-            }
-            
-            if("Ranged".equals(u.getType().name))
-            {
-                setRangedAction(u);
-            }
-            
-            if("Barracks".equals(u.getType().name))
-            {
-                setBarracksAction(u);
-            }
-            
-            if("Base".equals(u.getType().name))
-            {
-                //setBaseAction(u);
-            }
-            gameState.issue(playerAction);//issues the actions assigned so far to allow conflicting actions to be caught
-            
-        }
-        //fills any remaining actions with a 1 frame none actions (a unit must always have an action assigned to it)
-        playerAction.fillWithNones(gameState, player, 1);
-                
-        return playerAction;
-    }    
-    
-    //function for each unit type to decide the action the given unit should take and add it to playerActions
-    public void setWorkerAction(Unit u)
-    {   
-        List<UnitAction> validActions = u.getUnitActions(gameState, 1);//gets all actions the unit can perform
-        if(gameState.isUnitActionAllowed(u, validActions.get(0)))
-        {//makes sure the action does not conflict with other unit actions
-            playerAction.addUnitAction(u, validActions.get(0));//does whatever happens to be at index 0. This should be altered to perform what is found to be the best action
+    // Managing actions of attack units
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType().canAttack && !unit.getType().canHarvest && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleAttackUnitActions(unit, currentPlayer, gameState);
         }
     }
-    
-    
-    public void setLightAction(Unit u)
-    {        
-        List<UnitAction> validActions = u.getUnitActions(gameState, 1);//gets all actions the unit can perform
-        Unit closestEnemy = getClosestEnemy(u);
-        int closestDistance = getSquareUnitDistance(u, closestEnemy);
-
-        if (closestEnemy != null) 
-        {// Prioritize attacking closest enemy first        
-            UnitAction attackAction = new UnitAction(UnitAction.TYPE_ATTACK_LOCATION, closestEnemy.getX(), closestEnemy.getY()); 
-            if (validActions.contains(attackAction) && gameState.isUnitActionAllowed(u, attackAction)) 
-            {
-                playerAction.addUnitAction(u, attackAction);
-                return;
-            }
+
+    // Managing worker units
+    List<Unit> workerUnits = new LinkedList<>();
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType().canHarvest && unit.getPlayer() == player) {
+            workerUnits.add(unit);
         }
-       
-        // Otherwise, move to find an enemy to attack
-        if (closestEnemy != null)
-        {
-            UnitAction moveTowardsClosest = moveInRange(u, closestEnemy);
-            if(moveTowardsClosest != null)
-            {
-                 playerAction.addUnitAction(u, moveTowardsClosest);
+    }
+    handleWorkerActions(workerUnits, currentPlayer, gameState);
+
+    // Consolidating actions into a PlayerAction
+    return translateActions(player, gameState);
+}
+
+private void handleBaseActions(Unit base, Player player, PhysicalGameState pgs) {
+    int workerCount = 0;
+    for (Unit unit : pgs.getUnits()) {
+        if (unit.getType() == workerUnit && unit.getPlayer() == player.getID()) {
+            workerCount++;
+        }
+    }
+    if (workerCount < 3 && player.getResources() >= workerUnit.cost) {
+        train(base, workerUnit);
+    }
+}
+
+private void handleBarracksActions(Unit barracks, Player player, PhysicalGameState pgs) {
+    // Count existing light and heavy infantry units
+    int lightInfantryCount = 0;
+    int heavyInfantryCount = 0;
+    for (Unit u : pgs.getUnits()) {
+        if (u.getType() == lightInfantry && u.getPlayer() == player.getID()) {
+            lightInfantryCount++;
+        }
+        if (u.getType() == heavyInfantry && u.getPlayer() == player.getID()) {
+            heavyInfantryCount++;
+        }
+    }
+
+    // Decide whether to train light or heavy infantry based on a simple strategy
+    boolean shouldTrainLightInfantry = lightInfantryCount <= heavyInfantryCount;
+
+    // Check resources and train units accordingly
+    if (shouldTrainLightInfantry && player.getResources() >= lightInfantry.cost) {
+        train(barracks, lightInfantry);
+    } else if (player.getResources() >= heavyInfantry.cost) {
+        train(barracks, heavyInfantry);
+    }
+}
+
+private void handleAttackUnitActions(GameState gs, PhysicalGameState pgs, Player player) {
+    List<Unit> lightInfantryUnits = new ArrayList<>();
+    List<Unit> heavyInfantryUnits = new ArrayList<>();
+
+    // Separate light and heavy infantry units
+    for (Unit u : pgs.getUnits()) {
+        if (u.getPlayer() == player.getID()) {
+            if (u.getType() == lightInfantry) {
+                lightInfantryUnits.add(u);
+            } else if (u.getType() == heavyInfantry) {
+                heavyInfantryUnits.add(u);
             }
         }
     }
-    
-    // Heavy units Action set(Shay)
-    public void setHeavyAction(Unit u)
-    {
-        List<UnitAction> validActions = u.getUnitActions(gameState, 1);//gets all actions the unit can perform
-        Unit closestEnemy = getClosestEnemy(u);
-        int closestDistance = getSquareUnitDistance(u, closestEnemy);
-
-        if (closestEnemy != null) 
-        {// Prioritize attacking closest enemy first        
-            UnitAction attackAction = new UnitAction(UnitAction.TYPE_ATTACK_LOCATION, closestEnemy.getX(), closestEnemy.getY()); 
-            if (validActions.contains(attackAction) && gameState.isUnitActionAllowed(u, attackAction)) 
-            {
-                playerAction.addUnitAction(u, attackAction);
-                return;
+
+    // Form groups and assign targets
+    while (lightInfantryUnits.size() >= 2 && heavyInfantryUnits.size() >= 1) {
+        List<Unit> group = new ArrayList<>();
+        group.add(lightInfantryUnits.remove(0));
+        group.add(lightInfantryUnits.remove(0));
+        group.add(heavyInfantryUnits.remove(0));
+
+        Unit target = findNearestEnemy(group, pgs, player);
+        if (target != null) {
+            for (Unit unit : group) {
+                attack(unit, target);
             }
         }
-        
-        // Otherwise, move to find an enemy to attack
-        if (closestEnemy != null)
-        {
-            UnitAction moveTowardsClosest = moveInRange(u, closestEnemy);
-            if( moveTowardsClosest != null)
-            {
-                 playerAction.addUnitAction(u, moveTowardsClosest);
+    }
+
+    //ranged unit if needed.
+}
+
+private Unit findNearestEnemy(List<Unit> group, PhysicalGameState pgs, Player player) {
+    Unit nearestEnemy = null;
+    int minDistance = Integer.MAX_VALUE;
+    for (Unit u : pgs.getUnits()) {
+        if (u.getPlayer() >= 0 && u.getPlayer() != player.getID()) {
+            for (Unit groupUnit : group) {
+                int distance = Math.abs(u.getX() - groupUnit.getX()) + Math.abs(u.getY() - groupUnit.getY());
+                if (nearestEnemy == null || distance < minDistance) {
+                    nearestEnemy = u;
+                    minDistance = distance;
+                }
             }
         }
+    }
+    return nearestEnemy;
+}
+private void handleWorkerActions(List<Unit> workers, Player player, GameState gs) {
+    PhysicalGameState pgs = gs.getPhysicalGameState();
+    int baseCount = 0;
+    int barracksCount = 0;
 
+    int usedResources = 0;
+    List<Unit> availableWorkers = new LinkedList<>(workers);
+
+    if (workers.isEmpty()) {
+        return;
     }
-    
-    // Determine Ranged Unit Action (Miguel)
-    // The logic for this type for now is defined as follows:
-    // First check if an enemy unit is within the danger zone, ie. 1 space
-    // If not, and there are enemies within range, attack
-    // If no enemies in range, move until there is are enemies in range
-    // Currently there is no logic for a defensive position set up. This is temporarily an aggressive ranged unit.
-    // A flaw would be that it does not check if it is moving into more danger, it simply moves away from the first found nearest unit
-    // As sophistication of this bot improves, more features and logic will be implemented
-    // Currently, the effectiveness of this strategy is questionable because theoretically, a unit could simply be continuously pursued and would never attack.
-    // In the larger sense of the game, however, due to the variable nature of the game, there are other factors at play - for example, perhaps heavy and light could assist in keeping space between enemy units and friendly ranged
-    public void setRangedAction(Unit u) 
-    {
-        
-        List<UnitAction> validActions = u.getUnitActions(gameState, 1);    // Gets all actions the unit can perform
-        
-        Unit closestEnemy = getClosestEnemy(u);
-        int closestDistance = getSquareUnitDistance(u, closestEnemy);
-        
-        // If an enemy is within 1 space in any direction, move one space in a direction such that it is no longer 1 space away
-        if (closestEnemy != null) 
-        { // If there is an enemy
-            // If in 'danger  zone', retreat
-            if (closestDistance == 1) 
-            {
-                // Determine which direction to move away from danger
-                int avoidX = closestEnemy.getX();
-                int avoidY = closestEnemy.getY();
-                int moveX, moveY;
-
-                // Note: right now, it doesn't check if the move is valid until after, and if it isn't, it will move on to the next action check which is attack
-                if (u.getX() < avoidX) { moveX = UnitAction.DIRECTION_LEFT; }
-                else if (u.getX() > avoidX) { moveX = UnitAction.DIRECTION_RIGHT; }
-                else { moveX = UnitAction.DIRECTION_NONE; }
-
-                if (u.getX() < avoidY) { moveY = UnitAction.DIRECTION_DOWN; }
-                else if (u.getX() > avoidY) { moveY = UnitAction.DIRECTION_UP; }
-                else { moveY = UnitAction.DIRECTION_NONE; }
-                
-        UnitAction moveAction = new UnitAction(UnitAction.TYPE_MOVE, (int)Math.round((Math.random() * 3.0)));
-                if (validActions.contains(moveAction) && gameState.isUnitActionAllowed(u, moveAction)) 
-                {
-                    playerAction.addUnitAction(u, moveAction);
-                    return;
-                }
+
+    // Counting existing bases and barracks
+    for (Unit u : pgs.getUnits()) {
+        if (u.getType() == baseUnit && u.getPlayer() == player.getID()) {
+            baseCount++;
+        }
+        if (u.getType() == barracksUnit && u.getPlayer() == player.getID()) {
+            barracksCount++;
+        }
+    }
+
+    List<Integer> reservedLocations = new LinkedList<>();
+    if (baseCount == 0 && !availableWorkers.isEmpty()) {
+        // Building a base
+        if (player.getResources() >= baseUnit.cost + usedResources) {
+            Unit worker = availableWorkers.remove(0);
+            constructBuilding(worker, baseUnit, worker.getX(), worker.getY(), reservedLocations, player, pgs);
+            usedResources += baseUnit.cost;
+        }
+    }
+
+    if (barracksCount == 0) {
+        // Building a barracks
+        if (player.getResources() >= barracksUnit.cost + usedResources && !availableWorkers.isEmpty()) {
+            Unit worker = availableWorkers.remove(0);
+            constructBuilding(worker, barracksUnit, worker.getX(), worker.getY(), reservedLocations, player, pgs);
+            usedResources += barracksUnit.cost;
+        }
+    }
+
+    // Assigning remaining workers to harvest resources
+    for (Unit worker : availableWorkers) {
+        manageResourceHarvesting(worker, pgs, player);
+    }
+}
+
+private void manageResourceHarvesting(Unit worker, PhysicalGameState pgs, Player player) {
+    Unit closestBase = null;
+    Unit closestResource = null;
+    int closestDistance = Integer.MAX_VALUE;
+    for (Unit u2 : pgs.getUnits()) {
+        if (u2.getType().isResource) {
+            int distance = Math.abs(u2.getX() - worker.getX()) + Math.abs(u2.getY() - worker.getY());
+            if (closestResource == null || distance < closestDistance) {
+                closestResource = u2;
+                closestDistance = distance;
             }
-            
-            // If the closest enemy is within range and is not within the danger zone specified above, and is within attack range, attack that unit
-            // Currently, it is possible the unit is within the danger zone and this unit still carries out an attack action - to be refined as we develop a better strategy
-            UnitAction attackAction = new UnitAction(UnitAction.TYPE_ATTACK_LOCATION, closestEnemy.getX(), closestEnemy.getY()); 
-            if (validActions.contains(attackAction) && gameState.isUnitActionAllowed(u, attackAction)) 
-            {
-                playerAction.addUnitAction(u, attackAction);
-                return;
+        }
+    }
+    closestDistance = Integer.MAX_VALUE;
+    for (Unit u2 : pgs.getUnits()) {
+        if (u2.getType().isStockpile && u2.getPlayer() == player.getID()) {
+            int distance = Math.abs(u2.getX() - worker.getX()) + Math.abs(u2.getY() - worker.getY());
+            if (closestBase == null || distance < closestDistance) {
+                closestBase = u2;
+                closestDistance = distance;
             }
         }
+    }
 
-        // Otherwise, move to find an enemy to attack
-        if (closestEnemy != null)
-        {
-            UnitAction moveTowardsClosest = moveInRange(u, closestEnemy);
-            if( moveTowardsClosest != null)
-            {
-                 playerAction.addUnitAction(u, moveTowardsClosest);
-            }
+    if (worker.getResources() > 0) {
+        if (closestBase != null) {
+            deliverResources(worker, closestBase);
+        }
+    } else {
+        if (closestResource != null && closestBase != null) {
+            harvest(worker, closestResource, closestBase);
         }
     }
+}
+
+private void deliverResources(Unit worker, Unit base) {
+    // Method for handling resource delivery by a worker
     
+}
+
+@Override
+public List<ParameterSpecification> getParameters() {
+    List<ParameterSpecification> params = new ArrayList<>();
+    params.add(new ParameterSpecification("PathFinding", PathFinding.class, new AStarPathFinding()));
+    return params;
+=======
+package mins_bot;
+
+import ai.abstraction.AbstractAction;
+import ai.abstraction.AbstractionLayerAI;
+import ai.abstraction.Harvest;
+import ai.abstraction.pathfinding.AStarPathFinding;
+import ai.core.AI;
+import ai.abstraction.pathfinding.PathFinding;
+import ai.core.ParameterSpecification;
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Random;
+import rts.GameState;
+import rts.PhysicalGameState;
+import rts.Player;
+import rts.PlayerAction;
+import rts.units.*;
+
+public class ShayAI extends AbstractionLayerAI {
+
+    private Random randomGenerator = new Random();
+    private UnitTypeTable unitTypeTable;
+    UnitType workerUnit;
+    UnitType baseUnit;
+    UnitType barracksUnit;
+    UnitType lightInfantry;
+    UnitType heavyInfantry;
+
+
+    public ShayAI(UnitTypeTable utt) {
+        this(utt, new AStarPathFinding());
+    }
+
+    public ShayAI(UnitTypeTable utt, PathFinding pathFinder) {
+        super(pathFinder);
+        initializeTypes(utt);
+    }
+
+    private void initializeTypes(UnitTypeTable utt) {
+        this.unitTypeTable = utt;
+        workerUnit = unitTypeTable.getUnitType("Worker");
+        baseUnit = unitTypeTable.getUnitType("Base");
+        barracksUnit = unitTypeTable.getUnitType("Barracks");
+        lightInfantry = unitTypeTable.getUnitType("Light");
+        heavyInfantry = unitTypeTable.getUnitType("Heavy");
+    }
+
+    @Override
+    public void reset() {
+        super.reset();
+    }
+
+    public void reset(UnitTypeTable utt) {
+        initializeTypes(utt);
+    }
+
+    @Override
+    public AI clone() {
+        return new ShayAI(unitTypeTable, pf);
+    }
     
-    public void setBarracksAction(Unit u)
-    {
-        List<Unit> units = gameState.getUnits();
-        int idleBarracks = 0;
-        for(Unit currentUnit:units)
-        {//finds how many idle barracks there are to consider the money that should be used
-            if(currentUnit.isIdle(gameState) && currentUnit.getPlayer() == playerID && currentUnit.getType().name == "Barracks")
-            {
-                ++idleBarracks;
-            }
+public PlayerAction getAction(int player, GameState gameState) {
+    PhysicalGameState physicalState = gameState.getPhysicalGameState();
+    Player currentPlayer = gameState.getPlayer(player);
+
+    // Managing base actions
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType() == baseUnit && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleBaseActions(unit, currentPlayer, physicalState);
         }
-        int budget = (gameState.getPhysicalGameState().getPlayer(playerID).getResources() - playerAction.getResourceUsage().getResourcesUsed(playerID)) / idleBarracks;//the share of this barracks resources in evenly split amoung idle barracks. Ignores worker and base resource ussage.
-        
-        UnitType bestUnitType = gameState.getUnitTypeTable().getUnitTypes().get(0);//The best type of unit that can be produced
-        int bestValue = Integer.MIN_VALUE;
-        for(UnitType type:u.getType().produces)
-        {
-            if(type.cost <= budget)
-            {//finds the best unit in budget or cheapest unit if none are within budget
-                if(type.hp*type.maxDamage*type.attackRange/type.attackTime > bestValue)
-                {
-                    bestUnitType = type;
-                    bestValue = bestUnitType.hp*bestUnitType.maxDamage*bestUnitType.attackRange/bestUnitType.attackTime;
-                }
-            }
-            else
-            {
-                if(type.cost < bestUnitType.cost)
-                {
-                    bestUnitType = type;
-                }
-            }
+    }
+
+    // Managing barracks actions
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType() == barracksUnit && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleBarracksActions(unit, currentPlayer, physicalState);
         }
-        
-        bestUnitType = gameState.getUnitTypeTable().getUnitType((int)(4+(int)(Math.random()*3)));
-        if(bestUnitType.cost > (gameState.getPhysicalGameState().getPlayer(playerID).getResources() - playerAction.getResourceUsage().getResourcesUsed(playerID)))
-        {//if there are not enough resources to produce the unit returns
+    }
+
+    // Managing actions of attack units
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType().canAttack && !unit.getType().canHarvest && unit.getPlayer() == player && gameState.getActionAssignment(unit) == null) {
+            handleAttackUnitActions(gameState, physicalState, currentPlayer);
+        }
+    }
+
+    // Managing worker units
+    List<Unit> workerUnits = new LinkedList<>();
+    for (Unit unit : physicalState.getUnits()) {
+        if (unit.getType().canHarvest && unit.getPlayer() == player) {
+            workerUnits.add(unit);
+        }
+    }
+    handleWorkerActions(workerUnits, currentPlayer, gameState);
+
+    // Consolidating actions into a PlayerAction
+    return translateActions(player, gameState);
+}
+
+private void handleBaseActions(Unit base, Player player, PhysicalGameState pgs) {
+    int workerCount = 0;
+    for (Unit unit : pgs.getUnits()) {
+        if (unit.getType() == workerUnit && unit.getPlayer() == player.getID()) {
+            workerCount++;
+        }
+    }
+    if (workerCount < 3 && player.getResources() >= workerUnit.cost) {
+        train(base, workerUnit);
+    }
+}
+
+private void constructBuilding(Unit worker, UnitType buildingType, int x, int y, List<Integer> reservedLocations, Player player, PhysicalGameState pgs) {
+    // Check if the position is already reserved or occupied
+    if (reservedLocations.contains(x + y * pgs.getWidth()) || pgs.getUnitAt(x, y) != null) {
+        // Find a new location if the current one is not available
+        int newLocation = findBuildingLocation(x, y, reservedLocations, pgs);
+        if (newLocation != -1) {
+            x = newLocation % pgs.getWidth();
+            y = newLocation / pgs.getWidth();
+        } else {
+            // No suitable location found, return without building
             return;
         }
-        
-        float bestDirectionWorth = -1;
-        int bestDirection = 0;
-        for(int i = 0; i < 4; ++i)
-        {
-            float  directionWorth = 0;
-            int newX = u.getX() + UnitAction.DIRECTION_OFFSET_X[i];
-            int newY = u.getY() + UnitAction.DIRECTION_OFFSET_Y[i];
-            
-            if(newX < 0 || newY < 0 ||  newX >= gameState.getPhysicalGameState().getWidth() || newY >= gameState.getPhysicalGameState().getHeight() || !gameState.free(newX, newY))
-            {//skips spaces which are occupied or out of bounds
-                continue;
-            }
-            
-            for(Unit currentUnit:units)
-            {//increases worth of unit being produced in a direction based on proximity to other units
-                if(currentUnit.getPlayer() == playerID)
-                {//bonus for ally proximity
-                    int distance = 1 + Math.abs(newX - currentUnit.getX()) + Math.abs(newY - currentUnit.getY());
-                   directionWorth += 1/distance ;//closer frendly units are more beneficial 
-                }
-                else
-                {//bonus for enemy proximity
-                   int distance = Math.abs(newX - currentUnit.getX()) + Math.abs(newY - currentUnit.getY());
-                   directionWorth += 1/(1 + Math.abs(distance -bestUnitType.attackRange));//closer to the attack range is more valuable 
+    }
+
+    // Reserve the location
+    reservedLocations.add(x + y * pgs.getWidth());
+
+    // Command the worker to build
+    build(worker, buildingType, x, y);
+}
+
+private int findBuildingLocation(int startX, int startY, List<Integer> reservedLocations, PhysicalGameState pgs) {
+    // Search for a suitable location around the starting point
+    for (int x = startX - 2; x <= startX + 2; x++) {
+        for (int y = startY - 2; y <= startY + 2; y++) {
+            if (x >= 0 && y >= 0 && x < pgs.getWidth() && y < pgs.getHeight() && pgs.getUnitAt(x, y) == null) {
+                int location = x + y * pgs.getWidth();
+                if (!reservedLocations.contains(location)) {
+                    return location;
                 }
             }
-            
-            if(directionWorth > bestDirectionWorth)
-            {
-                bestDirectionWorth = directionWorth;
-                bestDirection = i;
-            }
         }
-        UnitAction bestAction = new UnitAction(UnitAction.TYPE_PRODUCE, bestDirection, bestUnitType);
-        if(gameState.isUnitActionAllowed(u, bestAction))
-        {
-            playerAction.addUnitAction(u, bestAction);
+    }
+    return -1; // No suitable location found
+}
+
+private void handleBarracksActions(Unit barracks, Player player, PhysicalGameState pgs) {
+    // Count existing light and heavy infantry units
+    int lightInfantryCount = 0;
+    int heavyInfantryCount = 0;
+    for (Unit u : pgs.getUnits()) {
+        if (u.getType() == lightInfantry && u.getPlayer() == player.getID()) {
+            lightInfantryCount++;
+        }
+        if (u.getType() == heavyInfantry && u.getPlayer() == player.getID()) {
+            heavyInfantryCount++;
         }
     }
-    
-    
-    public void setBaseAction(Unit u)
-    {
-        List<UnitAction> validActions = u.getUnitActions(gameState, 1);//gets all actions the unit can perform
-        if(gameState.isUnitActionAllowed(u, validActions.get(0)))
-        {//makes sure the action does not conflict with other unit actions
-            playerAction.addUnitAction(u, validActions.get(0));//does whatever happens to be at index 0. This should be altered to perform what is found to be the best action
+
+    // Decide whether to train light or heavy infantry based on a simple strategy
+    boolean shouldTrainLightInfantry = lightInfantryCount <= heavyInfantryCount;
+
+    // Check resources and train units accordingly
+    if (shouldTrainLightInfantry && player.getResources() >= lightInfantry.cost) {
+        train(barracks, lightInfantry);
+    } else if (player.getResources() >= heavyInfantry.cost) {
+        train(barracks, heavyInfantry);
+    }
+}
+
+private void handleAttackUnitActions(GameState gs, PhysicalGameState pgs, Player player) {
+    List<Unit> lightInfantryUnits = new ArrayList<>();
+    List<Unit> heavyInfantryUnits = new ArrayList<>();
+
+    // Separate light and heavy infantry units
+    for (Unit u : pgs.getUnits()) {
+        if (u.getPlayer() == player.getID()) {
+            if (u.getType() == lightInfantry) {
+                lightInfantryUnits.add(u);
+            } else if (u.getType() == heavyInfantry) {
+                heavyInfantryUnits.add(u);
+            }
         }
-        
     }
-    
-    //returns the enemy closest to the unit u or null if there is none
-    private Unit getClosestEnemy(Unit u){
-        Unit closestEnemy = null;       // Checks for any enemy units nearby the heavy units
-        int closestDistance = Integer.MAX_VALUE;
-        for (Unit unit : gameState.getUnits()) 
-        {
-            if (unit.getPlayer() >= 0 && unit.getPlayer() != u.getPlayer()) 
-            { 
-                int distance = getSquareUnitDistance(u, unit);
-                if (distance < closestDistance) 
-                {
-                    closestDistance = distance;
-                    closestEnemy = unit;
-                }
+
+    // Form groups and assign targets
+    while (lightInfantryUnits.size() >= 2 && heavyInfantryUnits.size() >= 1) {
+        List<Unit> group = new ArrayList<>();
+        group.add(lightInfantryUnits.remove(0));
+        group.add(lightInfantryUnits.remove(0));
+        group.add(heavyInfantryUnits.remove(0));
+
+        Unit target = findNearestEnemy(group, pgs, player);
+        if (target != null) {
+            for (Unit unit : group) {
+                attack(unit, target);
             }
         }
-        return closestEnemy;
     }
-    
-    //returns the distance squared between the units, this is the distance that would be considered towards attack range not the distance to travel to eachother
-    //the square distance is used since square root is slow and range is dependant on the distance of a straight line between points rather than the spaces that would need traveled. 
-    private int getSquareUnitDistance(Unit u, Unit other){
-        return (other.getY() - u.getY())*(other.getY() - u.getY()) + (other.getX() - u.getX())*(other.getX() - u.getX());
+
+    //ranged unit if needed.
+}
+
+private Unit findNearestEnemy(List<Unit> group, PhysicalGameState pgs, Player player) {
+    Unit nearestEnemy = null;
+    int minDistance = Integer.MAX_VALUE;
+    for (Unit u : pgs.getUnits()) {
+        if (u.getPlayer() >= 0 && u.getPlayer() != player.getID()) {
+            for (Unit groupUnit : group) {
+                int distance = Math.abs(u.getX() - groupUnit.getX()) + Math.abs(u.getY() - groupUnit.getY());
+                if (nearestEnemy == null || distance < minDistance) {
+                    nearestEnemy = u;
+                    minDistance = distance;
+                }
+            }
+        }
     }
-    
-   //attempts to move within range to attach unit other, null will  be returned if no path exists
-    private UnitAction moveInRange(Unit u, Unit other){
-        int width = gameState.getPhysicalGameState().getWidth();
-        return pathFinder.findPathToPositionInRange(u, other.getX() + other.getY()*width, u.getAttackRange(), gameState, playerAction.getResourceUsage());
+    return nearestEnemy;
+}
+private void handleWorkerActions(List<Unit> workers, Player player, GameState gs) {
+    PhysicalGameState pgs = gs.getPhysicalGameState();
+    int baseCount = 0;
+    int barracksCount = 0;
+
+    int usedResources = 0;
+    List<Unit> availableWorkers = new LinkedList<>(workers);
+
+    if (workers.isEmpty()) {
+        return;
     }
-    
-   //attempts to move adjacent to unit other, null will  be returned if no path exists
-    private UnitAction moveTowardsUnit(Unit u, Unit other){
-        int width = gameState.getPhysicalGameState().getWidth();
-        return pathFinder.findPathToAdjacentPosition(u, other.getX() + other.getY()*width, gameState, playerAction.getResourceUsage());
+
+    // Counting existing bases and barracks
+    for (Unit u : pgs.getUnits()) {
+        if (u.getType() == baseUnit && u.getPlayer() == player.getID()) {
+            baseCount++;
+        }
+        if (u.getType() == barracksUnit && u.getPlayer() == player.getID()) {
+            barracksCount++;
+        }
     }
-    
-   //attempts to move towards the given position, null will  be returned if no path exists
-    private UnitAction moveTowardsPositon(Unit u, int x, int y){
-        int width = gameState.getPhysicalGameState().getWidth();
-        return pathFinder.findPath(u, x + y*width, gameState, playerAction.getResourceUsage());
+
+    List<Integer> reservedLocations = new LinkedList<>();
+    if (baseCount == 0 && !availableWorkers.isEmpty()) {
+        // Building a base
+        if (player.getResources() >= baseUnit.cost + usedResources) {
+            Unit worker = availableWorkers.remove(0);
+            constructBuilding(worker, baseUnit, worker.getX(), worker.getY(), reservedLocations, player, pgs);
+            usedResources += baseUnit.cost;
+        }
     }
-    
-    // This will be called by the microRTS GUI to get the
 
-    // list of parameters that this bot wants exposed
+    if (barracksCount == 0) {
+        // Building a barracks
+        if (player.getResources() >= barracksUnit.cost + usedResources && !availableWorkers.isEmpty()) {
+            Unit worker = availableWorkers.remove(0);
+            constructBuilding(worker, barracksUnit, worker.getX(), worker.getY(), reservedLocations, player, pgs);
+            usedResources += barracksUnit.cost;
+        }
+    }
 
-    // in the GUI.
+    // Assigning remaining workers to harvest resources
+    for (Unit worker : availableWorkers) {
+        manageResourceHarvesting(worker, pgs, player);
+    }
+}
 
-    public List<ParameterSpecification> getParameters()
+private void manageResourceHarvesting(Unit worker, PhysicalGameState pgs, Player player) {
+    Unit closestBase = null;
+    Unit closestResource = null;
+    int closestDistance = Integer.MAX_VALUE;
+    for (Unit u2 : pgs.getUnits()) {
+        if (u2.getType().isResource) {
+            int distance = Math.abs(u2.getX() - worker.getX()) + Math.abs(u2.getY() - worker.getY());
+            if (closestResource == null || distance < closestDistance) {
+                closestResource = u2;
+                closestDistance = distance;
+            }
+        }
+    }
+    closestDistance = Integer.MAX_VALUE;
+    for (Unit u2 : pgs.getUnits()) {
+        if (u2.getType().isStockpile && u2.getPlayer() == player.getID()) {
+            int distance = Math.abs(u2.getX() - worker.getX()) + Math.abs(u2.getY() - worker.getY());
+            if (closestBase == null || distance < closestDistance) {
+                closestBase = u2;
+                closestDistance = distance;
+            }
+        }
+    }
 
-    {
-        return new ArrayList<>();
+    if (worker.getResources() > 0) {
+        if (closestBase != null) {
+            deliverResources(worker, closestBase);
+        }
+    } else {
+        if (closestResource != null && closestBase != null) {
+            harvest(worker, closestResource, closestBase);
+        }
     }
+}
+
+private void deliverResources(Unit worker, Unit base) {
+    // Method for handling resource delivery by a worker
+    
+}
 
+@Override
+public List<ParameterSpecification> getParameters() {
+    List<ParameterSpecification> params = new ArrayList<>();
+    params.add(new ParameterSpecification("PathFinding", PathFinding.class, new AStarPathFinding()));
+    return params;
+}
+>>>>>>> b47aaa4adc71a01ab1df3aef91ca2f8ad766db49
 }
\ No newline at end of file
